n = nrow(BostonHousing)
train = sort(sample(1:nrow(BostonHousing), size = 3*n/4))
test = (1:n)[-train]
head(BostonHousing)
rf_fit = randomForest(x = BostonHousing[train,-ncol(BostonHousing)],
y = BostonHousing[train,'medv'],
xtest = BostonHousing[test,-ncol(BostonHousing)],
ytest = BostonHousing[test,'medv'],)
rf_fit = randomForest::randomForest(x = BostonHousing[train,-ncol(BostonHousing)],
y = BostonHousing[train,'medv'],
xtest = BostonHousing[test,-ncol(BostonHousing)],
ytest = BostonHousing[test,'medv'],)
?bartMachine
bart_fit = bartMachine::bartMachine(X = BostonHousing[train,-ncol(BostonHousing)],
y = BostonHousing[train,'medv'])
length(rf_fit$predicted)
n
length(train)
pred_bart = bart_fit$y_hat_train
true_y = BostonHousing[train,'medv']
pred_rf = rf_fit$predicted
pred_bart = bart_fit$y_hat_train
pred_bart_interval = predict(bart_fit)
pred_bart_interval = predict(bart_fit, new_data = BostonHousing[train,-ncol(BostonHousing)])
pred_bart_interval
str(BostonHousing[train,-ncol(BostonHousing)])
str(pred_bart_interval)
class(bart_fit)
help(predict.bartMachine)
help(predict.bartMachine)
?calc_prediction_intervals
pred_bart_interval = calc_prediction_intervals(bart_fit,
new_data = BostonHousing[train,-ncol(BostonHousing)])
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
new_data = BostonHousing[train,-ncol(BostonHousing)])
str(pred_bart_interval)
pred_bart_mean = predict(bart_fit, new_data = BostonHousing[train,-ncol(BostonHousing)])
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
new_data = BostonHousing[train,-ncol(BostonHousing)])
dim(pred_rf)
length(pred_rf)
length(pred_bart_mean)
dim(pred_bart_interval)
str(pred_bart_interval)
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
new_data = BostonHousing[train,-ncol(BostonHousing)])$interval
dim(pred_bart_interval)
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2])
head(df)
ggplot(df, aes(x = true_y, y = rf)) +
geom_point()
library(tidyverse)
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2])
df2 = df %>% gather(y)
head(df2)
df2 = df %>% gather(-y)
df2 = df %>% gather(y,
key = method,
value = fit)
head(df2)
df2 = df %>% gather(-y,
key = method,
value = fit)
head(df2)
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point()
df = data.frame(y = true_y,
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean)
interval = data.frame(bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2])
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean)
interval = data.frame(bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2])
df2 = df %>% gather(-y,
key = method,
value = fit)
package_version('Bchron')
package_version()
?package_version
library(Bchron)
package_version('Bchron')
packageVersion('Bchron')
options(htmltools.dir.version = FALSE)
source('https://raw.githubusercontent.com/andrewcparnell/rBART/master/rBART.R')
# Now do it on the Friedman example
set.seed(123)
dat = sim_friedman(500)
fried = data.frame(dat$X, dat$y)
head(fried)
head(fried)
fried = data.frame(dat$X, y = dat$y)
head(fried)
kable(fried)
kable::kable(fried)
packageVersion('Bchron')
R.Version()$major
R.Version()$minor
R.Version()
knitr::kable(fried)
knitr::kable(head(fried))
fried = round(data.frame(dat$X, y = dat$y), 3)
knitr::kable(head(fried))
?kable
set.seed(123)
dat = sim_friedman(500)
fried = data.frame(dat$X, y = dat$y)
knitr::kable(head(fried), digits = 2)
df2 = df %>% gather(-y,
key = method,
value = fit)
head(df2)
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Fitted values',
x = '',
y = 'Root mean square error') +
coord_flip() +
theme(legend.position = 'None')
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Fitted values',
x = 'True values',
y = 'Root mean square error')
levels(df2$method)
head(df2)
df2$method = as.factor(df2$method)
levels(df2$method)
levels(df2$method) = c("BART", "Random forest")
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Fitted values',
x = 'True values',
y = 'Root mean square error') +
theme(legend.position = 'None')
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
theme(legend.position = 'None')
?geom_errorbar
head(interval)
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
theme(legend.position = 'None') +
geom_errorbar(data = interval,
aes(x = y,
ymin = bart_low, ymax = bart_high))
interval = data.frame(y = true_y,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2])
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
theme(legend.position = 'None') +
geom_errorbar(data = interval,
aes(x = y,
ymin = bart_low, ymax = bart_high))
head(df2)
interval = data.frame(y = true_y,
fit = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2])
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
theme(legend.position = 'None') +
geom_errorbar(data = interval,
aes(x = y,
y =
ymin = bart_low, ymax = bart_high))
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
theme(legend.position = 'None') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
interval = data.frame(y = true_y,
fit = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2],
method = 'BART')
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
theme(legend.position = 'None') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
# Re-fit the RF and BART models
set.seed(123)
n = nrow(BostonHousing)
train = sort(sample(1:nrow(BostonHousing), size = 9*n/10))
test = (1:n)[-train]
lengt(test)
length(test)
train = sort(sample(1:nrow(BostonHousing), size = 19*n/20))
test = (1:n)[-train]
train = sort(sample(1:nrow(BostonHousing), size = 19*n/20))
length(test)
# Re-fit the RF and BART models
set.seed(123)
n = nrow(BostonHousing)
train = sort(sample(1:nrow(BostonHousing), size = 19*n/20))
test = (1:n)[-train]
rf_fit = randomForest::randomForest(x = BostonHousing[train,-ncol(BostonHousing)],
y = BostonHousing[train,'medv'],
xtest = BostonHousing[test,-ncol(BostonHousing)],
ytest = BostonHousing[test,'medv'])
bart_fit = bartMachine::bartMachine(X = BostonHousing[train,-ncol(BostonHousing)],
y = BostonHousing[train,'medv'])
true_y = BostonHousing[train,'medv']
pred_rf = rf_fit$test$predicted
pred_bart_mean = predict(bart_fit, new_data = BostonHousing[train,-ncol(BostonHousing)])
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
new_data = BostonHousing[train,-ncol(BostonHousing)])$interval
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean)
true_y = BostonHousing[test,'medv']
pred_rf = rf_fit$test$predicted
pred_bart_mean = predict(bart_fit, new_data = BostonHousing[train,-ncol(BostonHousing)])
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
new_data = BostonHousing[train,-ncol(BostonHousing)])$interval
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean)
lenth(true_y)
length(true_y)
length(pred_rf)
length(pred_bart_mean)
pred_bart_mean = predict(bart_fit, new_data = BostonHousing[test,-ncol(BostonHousing)])
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
new_data = BostonHousing[test,-ncol(BostonHousing)])$interval
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean)
interval = data.frame(y = true_y,
fit = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2],
method = 'BART')
df2 = df %>% gather(-y,
key = method,
value = fit)
df2$method = as.factor(df2$method)
levels(df2$method) = c("BART", "Random forest")
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
?geom_abline
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1)
ggplot(df2, aes(x = y, y = fit, colour = method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
df2$Method = as.factor(df2$method)
levels(df2$Method) = c("BART", "Random forest")
ggplot(df2, aes(x = y, y = fit, colour = Method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
interval = data.frame(y = true_y,
fit = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2],
ethod = 'BART')
interval = data.frame(y = true_y,
fit = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2],
Method = 'BART')
df2 = df %>% gather(-y,
key = method,
value = fit)
df2$Method = as.factor(df2$method)
levels(df2$Method) = c("BART", "Random forest")
ggplot(df2, aes(x = y, y = fit, colour = Method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(title = 'Out of sample performances',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
ggplot(df2, aes(x = y, y = fit, colour = Method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(title = 'Out of sample performance',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
ggplot(df2, aes(x = y, y = fit, colour = Method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(title = 'Out of sample performance',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
ggsave('BART_prediction_intervals.pdf', width = 8, height = 6)
BostonHousing %>% head %>% round(digits = 3)
BostonHousing
str(BostonHousing)
BostonHousing %>% round(digits = 3) %>% head
BostonHousing %>% head
df = data.frame(alpha = rnorm(10000, 3, 2),
beta = rnorm(10000, -3, 0.1),
sigma = rgamma(10000, 1, 1))
head(df)
df2 = df %>% gather(key = variable)
head(df2)
df2 = df %>% gather(-iter, key = variable)
df = data.frame(iter = 1:10000,
alpha = rnorm(10000, 3, 2),
beta = rnorm(10000, -3, 0.1),
sigma = rgamma(10000, 1, 1))
df2 = df %>% gather(-iter, key = variable)
head(df)
df2 = df %>% gather(-iter,
key = variable,
value = value)
head(df2)
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet(variable ~ .)
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet_grid(variable ~ .)
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet_grid(variable ~ ., 'free_y')
?facet_grid
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet_grid(variable ~ ., scales = 'free_y')
df = data.frame(iter = 1:1000,
alpha = rnorm(1000, 3, 2),
beta = rnorm(1000, -3, 0.1),
sigma = rgamma(1000, 1, 1))
df2 = df %>% gather(-iter,
key = variable,
value = value)
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet_grid(variable ~ ., scales = 'free_y')
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet_grid(variable ~ ., scales = 'free_y') +
theme(legend.position = 'None')
ggplot(df2, aes(x = iter, y = value, colour = variable)) +
geom_line() +
theme_bw() +
facet_grid(variable ~ ., scales = 'free_y') +
theme(legend.position = 'None') +
labs(x = 'Iteration',
y = 'Value')
?include_graphics
# Re-fit the RF and BART models
set.seed(123)
n = nrow(BostonHousing)
?calc_prediction_intervals
pred_bart_interval
true_y = BostonHousing[test,'medv']
pred_rf = rf_fit$test$predicted
pred_bart_mean = predict(bart_fit, new_data = BostonHousing[test,-ncol(BostonHousing)])
pred_bart_interval = bartMachine::calc_prediction_intervals(bart_fit,
pi_conf = 0.5,
new_data = BostonHousing[test,-ncol(BostonHousing)])$interval
df = data.frame(y = true_y,
rf = pred_rf,
bart_mean = pred_bart_mean)
interval = data.frame(y = true_y,
fit = pred_bart_mean,
bart_low = pred_bart_interval[,1],
bart_high = pred_bart_interval[,2],
Method = 'BART')
df2 = df %>% gather(-y,
key = method,
value = fit)
df2$Method = as.factor(df2$method)
levels(df2$Method) = c("BART", "Random forest")
ggplot(df2, aes(x = y, y = fit, colour = Method)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(title = 'Out of sample performance: 50% uncertainty interval',
x = 'True values',
y = 'Predicted values') +
geom_errorbar(data = interval,
aes(ymin = bart_low, ymax = bart_high))
ggsave('BART_prediction_intervals.pdf', width = 8, height = 6)
# Clear the workspace and load in package
rm(list = ls())
setwd("~/GitHub/rBART")
# Source in the code
source('rBART.R')
# Load in the data - first column is target
data = read.table("friedman.txt")
X = data[,-1]
y = scale(data[,1])[,1]
rBART_out = rBART(X, y, num_trees = 2,
MCMC = list(iter = 500,
burn = 0,
thin = 1))
# Tree plotter
plot_tree(rBART_out, horiz = TRUE)
rBART_out$trees[[58]][[1]]$tree_matrix
setwd("~/GDrive/Conferences&Talks/Intro_BART_20181205")
ggsave('tree_58.pdf', width = 8, height = 6)
tree_58 = rBART_out$trees[[58]][[1]]$tree_matrix
write_rds(tree_58, file = 'tree_58.rds')
write_rds('tree_58')
write_rds('tree_58', path = 'tree_58.rds')
tree_58 = readRDS('tree_58.rds')
tree_58
write_rds(tree_58, path = 'tree_58.rds')
tree_58 = readRDS('tree_58.rds')
tree_58
tree_58
tree_58 = rBART_out$trees[[58]][[1]]$tree_matrix
write_rds(tree_58, path = 'tree_58.rds')
tree_58
tree_58 %>% round(., digits = 3)
# Plot the log likelihood history
plot(rBART_out$log_lik)
rBART_out = rBART(X, y, num_trees = 5)
getwd()
writeRDS(rBART_out$sigma, file = 'rBART_sigma.rds')
saveRDS(rBART_out$sigma, file = 'rBART_sigma.rds')
sigma_post = readRDS('rBART_sigma.rds')
ggplot(sigma_post, aes(x = 1:length(sigma_post), y = sigma_post)) +
geom_line()
sigma_post = readRDS('rBART_sigma.rds')
df = data.frame(Iteration = 1:length(sigma_post),
Sigma = sigma_post)
ggplot(df, aes(x = Iteration, y = Sigma)) +
geom_line() +
theme_bw()
rBART_out = rBART(X, y, num_trees = 5,
MCMC = list(iter = 10000,
burn = 2000,
thin = 8))
setwd("~/GDrive/Conferences&Talks/Intro_BART_20181205")
auf::packages('mlbench')
